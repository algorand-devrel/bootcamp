#pragma version 8
intcblock 0 1 999
bytecblock 0x151f7c75 0x 0x6c6173745f73756d 0x6d795f6c6173745f73756d 0x6c6173745f6d756c7469706c79
txn NumAppArgs
intc_0 // 0
==
bnz main_l18
txna ApplicationArgs 0
pushbytes 0x02bece11 // "hello(string)string"
==
bnz main_l17
txna ApplicationArgs 0
pushbytes 0x640e1067 // "difference(uint64,uint64)uint64"
==
bnz main_l16
txna ApplicationArgs 0
pushbytes 0x766083a7 // "multiply(uint64,uint64)uint64"
==
bnz main_l15
txna ApplicationArgs 0
pushbytes 0x30c6d58a // "opt_in()void"
==
bnz main_l14
txna ApplicationArgs 0
pushbytes 0x4e654476 // "test()string"
==
bnz main_l13
txna ApplicationArgs 0
pushbytes 0xf0b039f9 // "add(pay,uint64,uint64,account)uint64"
==
bnz main_l12
txna ApplicationArgs 0
pushbytes 0xe985f22e // "read_global_sum()uint64"
==
bnz main_l11
txna ApplicationArgs 0
pushbytes 0x9ea7e6e0 // "read_local_sum()uint64"
==
bnz main_l10
err
main_l10:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub readlocalsumcaster_16
intc_1 // 1
return
main_l11:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub readglobalsumcaster_15
intc_1 // 1
return
main_l12:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub addcaster_14
intc_1 // 1
return
main_l13:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub testcaster_13
intc_1 // 1
return
main_l14:
txn OnCompletion
intc_1 // OptIn
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub optincaster_12
intc_1 // 1
return
main_l15:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub multiplycaster_11
intc_1 // 1
return
main_l16:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub differencecaster_10
intc_1 // 1
return
main_l17:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub hellocaster_9
intc_1 // 1
return
main_l18:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l20
err
main_l20:
txn ApplicationID
intc_0 // 0
==
assert
callsub create_0
intc_1 // 1
return

// create
create_0:
proto 0 0
bytec 4 // "last_multiply"
intc_0 // 0
app_global_put
bytec_2 // "last_sum"
intc_2 // 999
app_global_put
retsub

// hello
hello_1:
proto 1 1
bytec_1 // ""
pushbytes 0x486f6c612c20 // "Hola, "
frame_dig -1
extract 2 0
concat
frame_bury 0
frame_dig 0
len
itob
extract 6 0
frame_dig 0
concat
frame_bury 0
retsub

// difference
difference_2:
proto 2 1
intc_0 // 0
frame_dig -2
frame_dig -1
>
bnz difference_2_l4
frame_dig -2
frame_dig -1
==
bnz difference_2_l3
frame_dig -1
frame_dig -2
-
frame_bury 0
b difference_2_l5
difference_2_l3:
pushint 1337 // 1337
frame_bury 0
b difference_2_l5
difference_2_l4:
frame_dig -2
frame_dig -1
-
frame_bury 0
difference_2_l5:
retsub

// multiply
multiply_3:
proto 2 1
intc_0 // 0
bytec 4 // "last_multiply"
frame_dig -2
frame_dig -1
*
app_global_put
frame_dig -2
frame_dig -1
*
frame_bury 0
retsub

// opt_in
optin_4:
proto 0 0
txn Sender
bytec_3 // "my_last_sum"
intc_2 // 999
app_local_put
retsub

// test
test_5:
proto 0 1
bytec_1 // ""
pushbytes 0x4375656e7461313a20 // "Cuenta1: "
global CurrentApplicationAddress
concat
pushbytes 0x2d2d2d2d323a20 // "----2: "
concat
global CreatorAddress
concat
frame_bury 0
frame_dig 0
len
itob
extract 6 0
frame_dig 0
concat
frame_bury 0
retsub

// add
add_6:
proto 4 1
intc_0 // 0
frame_dig -4
gtxns Receiver
global CurrentApplicationAddress
==
assert
frame_dig -4
gtxns Amount
pushint 500000 // 500000
>=
assert
bytec_2 // "last_sum"
frame_dig -3
frame_dig -2
+
app_global_put
txn Sender
bytec_3 // "my_last_sum"
frame_dig -3
frame_dig -2
+
app_local_put
itxn_begin
intc_1 // pay
itxn_field TypeEnum
global CreatorAddress
itxn_field Receiver
frame_dig -4
gtxns Amount
pushint 2 // 2
/
itxn_field Amount
itxn_submit
frame_dig -3
frame_dig -2
+
frame_bury 0
retsub

// read_global_sum
readglobalsum_7:
proto 0 1
intc_0 // 0
bytec_2 // "last_sum"
app_global_get
frame_bury 0
retsub

// read_local_sum
readlocalsum_8:
proto 0 1
intc_0 // 0
txn Sender
bytec_3 // "my_last_sum"
app_local_get
frame_bury 0
retsub

// hello_caster
hellocaster_9:
proto 0 0
bytec_1 // ""
dup
txna ApplicationArgs 1
frame_bury 1
frame_dig 1
callsub hello_1
frame_bury 0
bytec_0 // 0x151f7c75
frame_dig 0
concat
log
retsub

// difference_caster
differencecaster_10:
proto 0 0
intc_0 // 0
dupn 2
txna ApplicationArgs 1
btoi
frame_bury 1
txna ApplicationArgs 2
btoi
frame_bury 2
frame_dig 1
frame_dig 2
callsub difference_2
frame_bury 0
bytec_0 // 0x151f7c75
frame_dig 0
itob
concat
log
retsub

// multiply_caster
multiplycaster_11:
proto 0 0
intc_0 // 0
dupn 2
txna ApplicationArgs 1
btoi
frame_bury 1
txna ApplicationArgs 2
btoi
frame_bury 2
frame_dig 1
frame_dig 2
callsub multiply_3
frame_bury 0
bytec_0 // 0x151f7c75
frame_dig 0
itob
concat
log
retsub

// opt_in_caster
optincaster_12:
proto 0 0
callsub optin_4
retsub

// test_caster
testcaster_13:
proto 0 0
bytec_1 // ""
callsub test_5
frame_bury 0
bytec_0 // 0x151f7c75
frame_dig 0
concat
log
retsub

// add_caster
addcaster_14:
proto 0 0
intc_0 // 0
dupn 4
txna ApplicationArgs 1
btoi
frame_bury 2
txna ApplicationArgs 2
btoi
frame_bury 3
txna ApplicationArgs 3
intc_0 // 0
getbyte
frame_bury 4
txn GroupIndex
intc_1 // 1
-
frame_bury 1
frame_dig 1
gtxns TypeEnum
intc_1 // pay
==
assert
frame_dig 1
frame_dig 2
frame_dig 3
frame_dig 4
callsub add_6
frame_bury 0
bytec_0 // 0x151f7c75
frame_dig 0
itob
concat
log
retsub

// read_global_sum_caster
readglobalsumcaster_15:
proto 0 0
intc_0 // 0
callsub readglobalsum_7
frame_bury 0
bytec_0 // 0x151f7c75
frame_dig 0
itob
concat
log
retsub

// read_local_sum_caster
readlocalsumcaster_16:
proto 0 0
intc_0 // 0
callsub readlocalsum_8
frame_bury 0
bytec_0 // 0x151f7c75
frame_dig 0
itob
concat
log
retsub